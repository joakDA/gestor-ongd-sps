@model GestorONG.ViewModel.DonacionesViewModel

@{
    ViewBag.Title = "Editar una Donación";

    if (TempData["Acierto"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            <p class="text-center align-middle"><span class="fa fa-check"></span> @TempData["Acierto"]</p>
        </div>
    }

    if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            <p class="text-center align-middle"><span class="fa fa-times"></span> @TempData["Error"]</p>
        </div>
    }
}

<h2 class="titulo-pagina text-center">Donación de @Html.DisplayFor(model => model.donacion.colaboradores.nombre) @Html.DisplayFor(model => model.donacion.colaboradores.apellidos)</h2>

@using (Html.BeginForm(null, null, new { @id = string.Empty }, FormMethod.Post,
                new { @id = "editarDonacion" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.donacion.id)

        <div class="row fila-form">
            <div class="form-group col-xs-12 col-md-6">
                @Html.LabelFor(model => model.donacion.cantidad, htmlAttributes: new { @class = "control-label col-xs-12" })
                @Html.EditorFor(model => model.donacion.cantidad, new { htmlAttributes = new { @class = "form-control col-xs-12" } })
                @Html.ValidationMessageFor(model => model.donacion.cantidad, "", new { @class = "text-danger col-xs-12 text-center" })
            </div>
            <div class="form-group col-xs-12 col-md-6 dates-row">
                @Html.LabelFor(model => model.donacion.fechaAlta, htmlAttributes: new { @class = "control-label col-xs-12" })
                @Html.EditorFor(model => model.donacion.fechaAlta, new { htmlAttributes = new { @class = "form-control col-xs-12 col-md-11", data_toggle = "datetimepicker", data_target = "#donacion_fechaAlta" } })
                <div class="input-group-append" data-target="#donacion_fechaAlta" data-toggle="datetimepicker">
                    <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                </div>
                @Html.ValidationMessageFor(model => model.donacion.fechaAlta, "", new { @class = "text-danger col-xs-12 text-center" })
            </div>
        </div>

        <div class="row fila-form">
            <div class="form-group col-xs-12 col-md-6">
                @Html.LabelFor(model => model.donacion.idColaborador, htmlAttributes: new { @class = "control-label col-xs-12" })
                @Html.HiddenFor(model => model.donacion.idColaborador)
                <p class="nombre-colaborador col-xs-12">@ViewBag.colaborador</p>
                @Html.ValidationMessageFor(model => model.donacion.idColaborador, "", new { @class = "text-danger col-xs-12 text-center" })
            </div>

            <div class="form-group col-xs-12 col-md-6">
                @Html.LabelFor(model => model.donacion.idPeriodicidad, htmlAttributes: new { @class = "control-label col-xs-12" })
                @Html.DropDownListFor(model => model.donacion.idPeriodicidad, ViewBag.idPeriodicidad as IEnumerable<SelectListItem>, new { @class = "form-control selectpicker col-xs-12" })
                @Html.ValidationMessageFor(model => model.donacion.idPeriodicidad, "", new { @class = "text-danger col-xs-12 text-center" })
            </div>
        </div>

        <div class="row fila-form">
            <div class="form-group col-xs-12 col-md-6">
                @Html.LabelFor(model => model.NIF, htmlAttributes: new { @class = "control-label col-xs-12" })
                @Html.EditorFor(model => model.NIF, new { htmlAttributes = new { @class = "form-control col-xs-12", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.NIF, "", new { @class = "text-danger col-xs-12 text-center" })
            </div>

            <div class="form-group col-xs-12 col-md-6">
                @Html.LabelFor(model => model.cuentaBancaria, htmlAttributes: new { @class = "control-label col-xs-12" })
                @Html.EditorFor(model => model.cuentaBancaria, new { htmlAttributes = new { @class = "form-control col-xs-12", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.cuentaBancaria, "", new { @class = "text-danger col-xs-12 text-center" })
            </div>
        </div>

        <div class="row botones-formulario">
            <div class="form-group col-xs-12 col-md-12">
                <div class="col-xs-12 col-md-12 text-center">
                    <input type="submit" value="Guardar" class="btn btn-outline-primary" />
                    @Html.ActionLink("Volver", "Index", null, new { @class = "btn btn-outline-danger" })
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/momentJS")
    @Scripts.Render("~/bundles/CustomJS")
    @Scripts.Render("~/bundles/boostrapSelectJS")
    @Scripts.Render("~/bundles/BootstrapDatetimePickerTDJS")
    <script type="text/javascript">
        $(document).ready(function () {
            InitializeDatepickers();
        });

        /*
        * Initialize datepickers depending the language.
        */
        function InitializeDatepickers() {
            var aux = null;
            var format = '';
            var picker = null;
            var date = null;
            var locale = '';

            format = 'DD/MM/YYYY';
            locale = 'es';

            picker = $('#donacion_fechaAlta');
            date = moment(picker.val(), format).toDate();
            picker.datetimepicker({ format: format, locale: locale });
            picker.datetimepicker({ 'date': date });
        }

        $(function () {
            $.validator.methods.date = function (value, element) {
                return this.optional(element) || moment(value, "DD/MM/YYYY", true).isValid();
            }
        });
    </script>
}
