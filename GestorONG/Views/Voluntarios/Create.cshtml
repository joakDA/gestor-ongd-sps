@model GestorONG.DataModel.voluntario

@{
    ViewBag.Title = "Crear Nuevo Voluntario";
    if (TempData["Acierto"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            <p class="text-center align-middle"><span class="fa fa-check"></span> @TempData["Acierto"]</p>
        </div>
    }

    if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            <p class="text-center align-middle"><span class="fa fa-times"></span> @TempData["Error"]</p>
        </div>
    }
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <div class="row fila-form">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group col-xs-12 col-md-6">
                @Html.LabelFor(model => model.nombre, htmlAttributes: new { @class = "control-label col-xs-12" })
                @Html.EditorFor(model => model.nombre, new { htmlAttributes = new { @class = "form-control col-xs-12" } })
                @Html.ValidationMessageFor(model => model.nombre, "", new { @class = "text-danger col-xs-12 text-center" })
            </div>
         
            <div class="form-group col-xs-12 col-md-6">
                @Html.LabelFor(model => model.apellidos, htmlAttributes: new { @class = "control-label col-xs-12" })
                @Html.EditorFor(model => model.apellidos, new { htmlAttributes = new { @class = "form-control col-xs-12" } })
                @Html.ValidationMessageFor(model => model.apellidos, "", new { @class = "text-danger col-xs-12 text-center" })

            </div>
        </div>
       
        <div class="row fila-form">
            <div class="form-group col-xs-12 col-md-6">
                @Html.LabelFor(model => model.direccionPostal, htmlAttributes: new { @class = "control-label col-xs-12" })
                @Html.EditorFor(model => model.direccionPostal, new { htmlAttributes = new { @class = "form-control col-xs-12" } })
                @Html.ValidationMessageFor(model => model.direccionPostal, "", new { @class = "text-danger col-xs-12 text-center" })
            </div>

            <div class="form-group col-xs-12 col-md-6">
                @Html.LabelFor(model => model.codigoPostal, htmlAttributes: new { @class = "control-label col-xs-12" })
                @Html.EditorFor(model => model.codigoPostal, new { htmlAttributes = new { @class = "form-control col-xs-12" } })
                @Html.ValidationMessageFor(model => model.codigoPostal, "", new { @class = "text-danger col-xs-12 text-center" })
            </div>
        </div>

        <div class="row fila-form">
            <div class="form-group col-xs-12 col-md-6">
                @Html.LabelFor(model => model.localidad, htmlAttributes: new { @class = "control-label col-xs-12" })
                @Html.EditorFor(model => model.localidad, new { htmlAttributes = new { @class = "form-control col-xs-12" } })
                @Html.ValidationMessageFor(model => model.localidad, "", new { @class = "text-danger col-xs-12 text-center" })
            </div>

            <div class="form-group col-xs-12 col-md-6">
                @Html.LabelFor(model => model.provincia, htmlAttributes: new { @class = "control-label col-xs-12" })
                @Html.EditorFor(model => model.provincia, new { htmlAttributes = new { @class = "form-control col-xs-12" } })
                @Html.ValidationMessageFor(model => model.provincia, "", new { @class = "text-danger col-xs-12 text-center" })
            </div>
        </div>

        <div class="row fila-form">
            <div class="form-group col-xs-12 col-md-6">
                @Html.LabelFor(model => model.pais, htmlAttributes: new { @class = "control-label col-xs-12" })
                @Html.DropDownListFor(model => model.pais, Enumerable.Empty<SelectListItem>(), new { @class = "form-control selectpicker col-xs-12" })
                @Html.ValidationMessageFor(model => model.pais, "", new { @class = "text-danger col-xs-12 text-center" })
            </div>

            <div class="form-group col-xs-12 col-md-6">
                @Html.LabelFor(model => model.telefono1, htmlAttributes: new { @class = "control-label col-xs-12" })
                @Html.EditorFor(model => model.telefono1, new { htmlAttributes = new { @class = "form-control col-xs-12" } })
                @Html.ValidationMessageFor(model => model.telefono1, "", new { @class = "text-danger col-xs-12 text-center" })
            </div>
        </div>

        <div class="row fila-form">
            <div class="form-group col-xs-12 col-md-6">
                @Html.LabelFor(model => model.telefono2, htmlAttributes: new { @class = "control-label col-xs-12" })
                @Html.EditorFor(model => model.telefono2, new { htmlAttributes = new { @class = "form-control col-xs-12" } })
                @Html.ValidationMessageFor(model => model.telefono2, "", new { @class = "text-danger col-xs-12 text-center" })
            </div>

            <div class="form-group col-xs-12 col-md-6">
                @Html.LabelFor(model => model.email, htmlAttributes: new { @class = "control-label col-xs-12" })
                @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control col-xs-12" } })
                @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger col-xs-12 text-center" })
            </div>
        </div>

        <div class="row fila-form dates-row">
            <div class="form-group col-xs-12 col-md-6">
                @Html.LabelFor(model => model.fechaNacimiento, htmlAttributes: new { @class = "control-label col-xs-12" })
                @Html.EditorFor(model => model.fechaNacimiento, new { htmlAttributes = new { @class = "form-control col-xs-12 col-md-11", data_toggle = "datetimepicker", data_target = "#fechaNacimiento" } })
                <div class="input-group-append" data-target="#fechaNacimiento" data-toggle="datetimepicker">
                    <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                </div>
                @Html.ValidationMessageFor(model => model.fechaNacimiento, "", new { @class = "text-danger col-xs-12 text-center" })
            </div>

            <div class="form-group col-xs-12 col-md-6">
                @Html.LabelFor(model => model.fechaAlta, htmlAttributes: new { @class = "control-label col-xs-12" })
                @Html.EditorFor(model => model.fechaAlta, new { htmlAttributes = new { @class = "form-control col-xs-12 col-md-11", data_toggle = "datetimepicker", data_target = "#fechaAlta" } })
                <div class="input-group-append" data-target="#fechaAlta" data-toggle="datetimepicker">
                    <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                </div>
                @Html.ValidationMessageFor(model => model.fechaAlta, "", new { @class = "text-danger col-xs-12 text-center" })
            </div>
        </div>

        <div class="row fila-form">
            <div class="form-group col-xs-12 col-md-6">
                @Html.LabelFor(model => model.Sede, htmlAttributes: new { @class = "control-label col-xs-12" })
                @Html.DropDownListFor(model => model.Sede, ViewBag.Delegaciones as IEnumerable<SelectListItem>, new { @class = "form-control col-xs-12" } )
                @Html.ValidationMessageFor(model => model.Sede, "", new { @class = "text-danger col-xs-12 text-center" })
            </div>

            <div class="form-group col-xs-12 col-md-6">
                @Html.LabelFor(model => model.Perfiles, htmlAttributes: new { @class = "control-label col-xs-12" })
                @Html.EditorFor(model => model.Perfiles, new { htmlAttributes = new { @class = "form-control col-xs-12", disabled = "disabled", @readonly = "readonly", @Value = "Voluntario" } })
                @Html.ValidationMessageFor(model => model.Perfiles, "", new { @class = "text-danger col-xs-12 text-center" })
            </div>
        </div>
        <div class="row botones-formulario">
            <div class="form-group col-xs-12 col-md-12">
                <div class="col-xs-12 col-md-12 text-center">
                    <input type="submit" value="Guardar" class="btn btn-outline-success" />
                    @Html.ActionLink("Volver", "Index",null, new { @class = "btn btn-outline-danger" })
                </div>
            </div>
        </div>
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/momentJS")
    @Scripts.Render("~/bundles/CustomJS")
    @Scripts.Render("~/bundles/boostrapSelectJS")
    @Scripts.Render("~/bundles/BootstrapDatetimePickerTDJS")
    <!-- Code to wire up your DatePicker -->
    <script type="text/javascript">
        $(document).ready(function () {
            //Se obtiene la lista de países desde una REST API pública de internet
            $.getJSON('https://restcountries.eu/rest/v2/all', function (result) {
                var dropdown = $('#pais');
                $.each(result, function () {
                    //Hay algunas traducciones vacias, por lo que se omiten estos resultados
                    if (!this.translations["es"] == "") {
                        dropdown.append(
                        $("<option></option>").text(this.translations["es"]).val(this.translations["es"])
                    );
                    }
                });
                $("#pais").append($("#pais option").remove().sort(function (a, b) {
                    var at = $(a).text(), bt = $(b).text();
                    return (at > bt) ? 1 : ((at < bt) ? -1 : 0);
                }));
                $('#pais').selectpicker('val', 'España');
                /*$('#pais').selectpicker({
                    dropupAuto: false
                });*/
                $("#pais").selectpicker('refresh');

                InitializeDatepickers();
            });
        });

/*
* Initialize datepickers depending the language.
*/
        function InitializeDatepickers() {
            var aux = null;
            var format = '';
            var picker = null;
            var date = null;
            var locale = '';

            format = 'DD/MM/YYYY';
            locale = 'es';

            picker = $('#fechaNacimiento');
            date = moment(picker.val(), format).toDate();
            picker.datetimepicker({ format: format, locale: locale });
            picker.datetimepicker({ 'date': date });

            picker = $('#fechaAlta');
            date = moment(picker.val(), format).toDate();
            picker.datetimepicker({ format: format, locale: locale });
            picker.datetimepicker({ 'date': date });
        }

        $(function () {
            $.validator.methods.date = function (value, element) {
                return this.optional(element) || moment(value, "DD/MM/YYYY", true).isValid();
            }
        });

    </script>
}

@section Styles{
    @Styles.Render("~/bundles/BootstrapDatetimePickerTDCSS")
}