@model GestorONG.DataModel.vistaColaboradores

@{
    ViewBag.Title = "Crear Nuevo Colaborador";

    if (TempData["Acierto"] != null)
    {
        <div class="alert alert-success fade in">
            <a href="#" class="close" data-dismiss="alert">&times;</a>
            <p class="text-center"><span class="glyphicon glyphicon-exclamation-sign"></span> @TempData["Acierto"]</p>
        </div>
    }
    if (TempData["Error"] != null)
    {
        <div class="alert alert-danger fade in">
            <a href="#" class="close" data-dismiss="alert">&times;</a>
            <p class="text-center"><span class="glyphicon glyphicon-exclamation-sign"></span> @TempData["Error"]</p>

        </div>
    }
}

<!-- STEP BY STEP FORM -->
<div class="stepwizard col-xs-12 offset-md-3 col-md-6">
    <div class="stepwizard-row setup-panel">
        <div class="stepwizard-step">
            <a href="#step-1" type="button" class="btn btn-primary btn-circle btn-1">1</a>
            <p>Colaborador</p>
        </div>
        <div class="stepwizard-step">
            <a href="#step-2" type="button" class="btn btn-default btn-circle" disabled="disabled">2</a>
            <p>Donación</p>
        </div>
    </div>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="setup-content" id="step-1">
            <div class="row fila-form">
                <div class="form-group col-xs-12 col-md-6">
                    @Html.LabelFor(model => model.nombre, htmlAttributes: new { @class = "control-label col-xs-12 col-md-4" })
                    @Html.EditorFor(model => model.nombre, new { htmlAttributes = new { @class = "form-control col-xs-12 col-md-8" } })
                    @Html.ValidationMessageFor(model => model.nombre, "", new { @class = "text-danger col-xs-12 text-center" })
                </div>

                <div class="form-group col-xs-12 col-md-6">
                    @Html.LabelFor(model => model.apellidos, htmlAttributes: new { @class = "control-label col-xs-12 col-md-4" })
                    @Html.EditorFor(model => model.apellidos, new { htmlAttributes = new { @class = "form-control col-xs-12 col-md-8" } })
                    @Html.ValidationMessageFor(model => model.apellidos, "", new { @class = "text-danger col-xs-12 text-center" })

                </div>
            </div>

            <div class="row fila-form">
                <div class="form-group col-xs-12 col-md-6">
                    @Html.LabelFor(model => model.direccionPostal, htmlAttributes: new { @class = "control-label col-xs-12 col-md-4" })
                    @Html.EditorFor(model => model.direccionPostal, new { htmlAttributes = new { @class = "form-control col-xs-12 col-md-8" } })
                    @Html.ValidationMessageFor(model => model.direccionPostal, "", new { @class = "text-danger col-xs-12 text-center" })
                </div>

                <div class="form-group col-xs-12 col-md-6">
                    @Html.LabelFor(model => model.codigoPostal, htmlAttributes: new { @class = "control-label col-xs-12 col-md-4" })
                    @Html.EditorFor(model => model.codigoPostal, new { htmlAttributes = new { @class = "form-control col-xs-12 col-md-8" } })
                    @Html.ValidationMessageFor(model => model.codigoPostal, "", new { @class = "text-danger col-xs-12 text-center" })
                </div>
            </div>

            <div class="row fila-form">
                <div class="form-group col-xs-12 col-md-6">
                    @Html.LabelFor(model => model.localidad, htmlAttributes: new { @class = "control-label col-xs-12 col-md-4" })
                    @Html.EditorFor(model => model.localidad, new { htmlAttributes = new { @class = "form-control col-xs-12 col-md-8" } })
                    @Html.ValidationMessageFor(model => model.localidad, "", new { @class = "text-danger col-xs-12 text-center" })
                </div>

                <div class="form-group col-xs-12 col-md-6">
                    @Html.LabelFor(model => model.provincia, htmlAttributes: new { @class = "control-label col-xs-12 col-md-4" })
                    @Html.EditorFor(model => model.provincia, new { htmlAttributes = new { @class = "form-control col-xs-12 col-md-8" } })
                    @Html.ValidationMessageFor(model => model.provincia, "", new { @class = "text-danger col-xs-12 text-center" })
                </div>
            </div>

            <div class="row fila-form">
                <div class="form-group col-xs-12 col-md-6">
                    @Html.LabelFor(model => model.pais, htmlAttributes: new { @class = "control-label col-xs-12 col-md-4" })
                    <!--@Html.EditorFor(model => model.pais, new { htmlAttributes = new { @class = "form-control col-xs-12 col-md-8" } })-->
                    @Html.DropDownListFor(model => model.pais, Enumerable.Empty<SelectListItem>(), new { @class = "form-control selectpicker col-xs-12 col-md-8" })
                    @Html.ValidationMessageFor(model => model.pais, "", new { @class = "text-danger col-xs-12 text-center" })
                </div>

                <div class="form-group col-xs-12 col-md-6">
                    @Html.LabelFor(model => model.telefono1, htmlAttributes: new { @class = "control-label col-xs-12 col-md-4" })
                    @Html.EditorFor(model => model.telefono1, new { htmlAttributes = new { @class = "form-control col-xs-12 col-md-8" } })
                    @Html.ValidationMessageFor(model => model.telefono1, "", new { @class = "text-danger col-xs-12 text-center" })
                </div>
            </div>

            <div class="row fila-form">
                <div class="form-group col-xs-12 col-md-6">
                    @Html.LabelFor(model => model.telefono2, htmlAttributes: new { @class = "control-label col-xs-12 col-md-4" })
                    @Html.EditorFor(model => model.telefono2, new { htmlAttributes = new { @class = "form-control col-xs-12 col-md-8" } })
                    @Html.ValidationMessageFor(model => model.telefono2, "", new { @class = "text-danger col-xs-12 text-center" })
                </div>

                <div class="form-group col-xs-12 col-md-6">
                    @Html.LabelFor(model => model.email, htmlAttributes: new { @class = "control-label col-xs-12 col-md-4" })
                    @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control col-xs-12 col-md-8" } })
                    @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger col-xs-12 text-center" })
                </div>
            </div>

            <div class="row fila-form">
                <div class="form-group col-xs-12 col-md-6">
                    @Html.LabelFor(model => model.fechaNacimiento, htmlAttributes: new { @class = "control-label col-xs-12 col-md-4" })
                    @Html.EditorFor(model => model.fechaNacimiento, "{0:dd/MM/yyyy}", new { htmlAttributes = new { @class = "form-control col-xs-12 col-md-8 date-picker" } })
                    @Html.ValidationMessageFor(model => model.fechaNacimiento, "", new { @class = "text-danger col-xs-12 text-center" })
                </div>

                <div class="form-group col-xs-12 col-md-6">
                    @Html.LabelFor(model => model.Perfiles, htmlAttributes: new { @class = "control-label col-xs-12 col-md-4" })
                    @Html.EditorFor(model => model.Perfiles, new { htmlAttributes = new { @class = "form-control col-xs-12 col-md-8", disabled = "disabled", @readonly = "readonly", @Value = "Colaborador" } })
                    @Html.ValidationMessageFor(model => model.Perfiles, "", new { @class = "text-danger col-xs-12 text-center" })
                </div>

            </div>
            <div class="row botones-formulario">
                <div class="form-group col-xs-12 col-md-12">
                    <div class="col-xs-12 col-md-12 text-center">
                        <button class="btn btn-primary nextBtn pull-right" type="button" disabled>Siguiente</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="setup-content" id="step-2">
            <div class="row fila-form">

                <div class="form-group col-xs-12 col-md-6">
                    @Html.LabelFor(model => model.CIF_NIF, htmlAttributes: new { @class = "control-label col-xs-12 col-md-4" })
                    @Html.EditorFor(model => model.CIF_NIF, "{0:dd/MM/yyyy}", new { htmlAttributes = new { @class = "form-control col-xs-12 col-md-8" } })
                    @Html.ValidationMessageFor(model => model.CIF_NIF, "", new { @class = "text-danger col-xs-12 text-center" })
                </div>

                <div class="form-group col-xs-12 col-md-6">
                    @Html.LabelFor(model => model.CuentaBancaria, htmlAttributes: new { @class = "control-label col-xs-12 col-md-4" })
                    @Html.EditorFor(model => model.CuentaBancaria, new { htmlAttributes = new { @class = "form-control col-xs-12 col-md-8" } })
                    @Html.ValidationMessageFor(model => model.CuentaBancaria, "", new { @class = "text-danger col-xs-12 text-center" })
                </div>
            </div>
            <div class="row fila-form">
                <div class="form-group col-xs-12 col-md-6">
                    @Html.LabelFor(model => model.cantidad, htmlAttributes: new { @class = "control-label col-xs-12 col-md-4" })
                    @Html.EditorFor(model => model.cantidad, new { htmlAttributes = new { @class = "form-control col-xs-12 col-md-8" } })
                    @Html.ValidationMessageFor(model => model.cantidad, "", new { @class = "text-danger col-xs-12 text-center" })
                </div>

                <div class="form-group col-xs-12 col-md-6">
                    @Html.LabelFor(model => model.fechaAlta, htmlAttributes: new { @class = "control-label col-xs-12 col-md-4" })
                    @Html.EditorFor(model => model.fechaAlta, new { htmlAttributes = new { @class = "form-control col-xs-12 col-md-8 date-picker-2" } })
                    @Html.ValidationMessageFor(model => model.fechaAlta, "", new { @class = "text-danger col-xs-12 text-center" })
                </div>
            </div>
            <div class="row fila-form">
                <div class="form-group col-xs-12 col-md-6">
                    @Html.LabelFor(model => model.Periodicidad, htmlAttributes: new { @class = "control-label col-xs-12 col-md-4" })
                    @Html.DropDownListFor(model => model.Periodicidad, ViewBag.Periodicidades as IEnumerable<SelectListItem>, new { @class = "form-control col-xs-12 col-md-8" })
                    @Html.ValidationMessageFor(model => model.Periodicidad, "", new { @class = "text-danger col-xs-12 text-center" })
                </div>
            </div>
            <div class="row botones-formulario">
                <div class="form-group col-xs-12 col-md-12">
                    <div class="col-xs-12 col-md-12 text-center">
                        <a class="btn btn-default btn-primary pull-left backBtn" href="#step-1" type="button">Anterior</a>
                        <input type="submit" value="Guardar" class="btn btn-primary" />
                        @Html.ActionLink("Volver", "Index", null, new { @class = "btn btn-danger" })
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryUI")
    @Scripts.Render("~/bundles/boostrapSelectJS")
    <!-- Code to wire up your DatePicker -->
    <script type="text/javascript">
        $(function () {
            $.datepicker.regional['es'] = {
                closeText: 'Cerrar',
                prevText: '< Ant',
                nextText: 'Sig >',
                currentText: 'Hoy',
                monthNames: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
                monthNamesShort: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],
                dayNames: ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'],
                dayNamesShort: ['Dom', 'Lun', 'Mar', 'Mié', 'Juv', 'Vie', 'Sáb'],
                dayNamesMin: ['Do', 'Lu', 'Ma', 'Mi', 'Ju', 'Vi', 'Sá'],
                weekHeader: 'Sm',
                dateFormat: 'dd/mm/yy',
                firstDay: 1,
                isRTL: false,
                showMonthAfterYear: false,
                yearSuffix: ''
            };
            $.datepicker.setDefaults($.datepicker.regional['es']);
            // This will make every element with the class "date-picker" into a DatePicker element
            $('.date-picker').datepicker({
                changeMonth: true,
                changeYear: true,
                yearRange: "-100:+0"
            });
            $('.date-picker-2').datepicker({
                changeMonth: true,
                changeYear: true,
                yearRange: "-10:+0"
            });
            //$("#datepicker").datepicker($.datepicker.regional["es"]);
        })
        /*****MULTISTEP FORM JQUERY*******/
        $(document).ready(function () {
            //Se obtiene la lista de países desde una REST API pública de internet
            $.getJSON('https://restcountries.eu/rest/v2/all', function (result) {
                var dropdown = $('#pais');
                $.each(result, function () {
                    //Hay algunas traducciones vacias, por lo que se omiten estos resultados
                    if (!this.translations["es"] == "") {
                        dropdown.append(
                        $("<option></option>").text(this.translations["es"]).val(this.translations["es"])
                    );
                    }
                });
                $("#pais").append($("#pais option").remove().sort(function (a, b) {
                    var at = $(a).text(), bt = $(b).text();
                    return (at > bt) ? 1 : ((at < bt) ? -1 : 0);
                }));
                $('#pais').selectpicker('val', 'España');
                $('#pais').selectpicker({
                    dropupAuto: false
                });
                $("#pais").selectpicker('refresh');
            });
            
            var navListItems = $('div.setup-panel div a'),
                    allWells = $('.setup-content'),
                    allNextBtn = $('.nextBtn');

            allWells.hide();

            navListItems.click(function (e) {
                e.preventDefault();
                var $target = $($(this).attr('href')),
                        $item = $(this);

                if (!$item.hasClass('disabled')) {
                    navListItems.removeClass('btn-primary').addClass('btn-default');
                    $item.addClass('btn-primary');
                    allWells.hide();
                    $target.show();
                    $target.find('input:eq(0)').focus();
                }
            });

            $(".backBtn").click(function (e) {
                e.preventDefault();
                var $target = $($(this).attr('href')),
                        $item = $(this);

                if (!$item.hasClass('disabled')) {
                    navListItems.removeClass('btn-primary').addClass('btn-default');
                    allWells.hide();
                    $target.show();
                    $target.find('input:eq(0)').focus();
                }
                $(".btn-1").addClass('btn-primary');
            });

            allNextBtn.click(function () {
                var curStep = $(this).closest(".setup-content"),
                    curStepBtn = curStep.attr("id"),
                    nextStepWizard = $('div.setup-panel div a[href="#' + curStepBtn + '"]').parent().next().children("a"),
                    curInputs = curStep.find("input[type='text'],input[type='url']"),
                    isValid = true;

                $(".form-group").removeClass("has-error");
                for (var i = 0; i < curInputs.length; i++) {
                    if (!curInputs[i].validity.valid) {
                        isValid = false;
                        $(curInputs[i]).closest(".form-group").addClass("has-error");
                    }
                }

                if (isValid)
                    nextStepWizard.removeAttr('disabled').trigger('click');
            });

            $('div.setup-panel div a.btn-primary').trigger('click');
        });
        /*VALIDAMOS QUE AL PULSAR EN NEXT ESTÉN TODOS LOS CAMPOS RELLENOS*/
        //ADAPTED FROM https://stackoverflow.com/questions/5614399/disabling-submit-button-until-all-fields-have-values
        (function () {
            $('input').change(function () {

                var empty = false;
                //Se comprueba si cada campo requerido del div con id (step-1) está relleno. Si lo está, se habilita el botón. Si no, se deshabilita.
                $("#step-1").find("[data-val-required]").each(function () {
                    if ($(this).val() == '') {
                        empty = true;
                    }
                });

                if (empty) {
                    $('.nextBtn').attr('disabled', 'disabled'); // updated according to http://stackoverflow.com/questions/7637790/how-to-remove-disabled-attribute-with-jquery-ie
                } else {
                    $('.nextBtn').removeAttr('disabled'); // updated according to http://stackoverflow.com/questions/7637790/how-to-remove-disabled-attribute-with-jquery-ie
                }
            });
        })()
    </script>
}
